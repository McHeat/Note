AngularJS：
1.一个JavaScript框架，通过指令扩展了HTML，通过表达式绑定数据到HTML。
2.通过script添加到页面，建议放在<body>元素的底部。
3.通过ng-directives扩展HTML。可通过使用data-ng来支持HTML5有效。
4.表达式为{{expression}}，可包含文字、运算符和变量。
5.模块(Module)定义了AngularJS应用，控制器(Controller)用于控制AngularJS应用
6.模块定义应用：	var app = angular.module('myApp', []);
  控制器控制应用：	app.controller('myCtl', function($scope) {});
7.指令即扩展的HTML属性
	ng-app:		初始化一个AngularJS应用程序
	ng-init:	初始化应用程序数据的初始值
	ng-model:	把元素值绑定到应用程序
	ng-repeat:	循环数组
8.通过.directive("", function() {return {};})可以创建自定义指令
	restrict值可以指定自定义指令通过特定的方式调用
	E:作为元素名使用
	A:作为属性使用
	C:作为类名使用
	M:作为注释使用
9.ng-model指令用于绑定应用程序数据到HTML控制器的值。
	为双向绑定，修改输入域的值属性值也会修改
	可验证用户输入
	可判断状态值：invalid，dirty，touched，error
	可根据表单域的状态添加/移除CSS类
10.Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带
	创建控制器时，可将$scope对象当作一个参数传递
	所有的应用都有一个$rootScope，可作用在ng-app指令包含的所有HTML元素
11.过滤器：使用管道字符(|)添加到表达式和指令中
	currency:	格式化数字为货币格式
	filter:		从数组项中选择一个子集
	lowercase：	格式化字符串为小写
	orderby:	根据某个表达式排列数组
	uppercase:	格式化字符串为大写
12.服务(Service)：
	可创建访问自定义服务，链接到模块中。方法：
		app.service(serviceName, function() {});
	过滤器中使用自定义服务：
		app.filter(filterName, [serviceName, function(serviceName) {}]);
13.$http:服务向服务器发送请求，应用响应服务器传送过来的数据
		$http.get(url)：用于读取服务器数据
	$location: 返回当前页面的URL地址
	$timeout:对应Js中的window.setTimeout函数
	$interval:对应Js中的window.setInterval函数
14.Select(选择框)
	方法一：
	<select ng-model="selected">
		<option ng-repeat=" x in arrs" value="{{x.x1}}">{{x.x2}}</option>
	</select>
	方法二（推荐）：
	<select ng-model="selected" ng-options=" x.x1 in arrs"></select>
	select中使用的数据源为对象时，ng-options=" x for (x, y) in obj"，其中x为键y为值
15.表格：通过ng-repeat来显示表格
	$index可用来显示序号
	$even和$odd用来判断奇偶行
16.HTML DOM
	ng-disabled指令：		绑定应用数据到HTML的disabled属性
	ng-show|ng-hide指令：	隐藏或显示一个HTML元素
17.事件：
	ng-click:AngularJS的点击事件
18.输入验证：
	$dirty:		表单有填写记录
	$valid:		字段内容合法
	$invalid:	字段内容非法
	$pristine:	表单没有填写记录
19.包含：
	ng-include指令
20.动画：
	通过模型ngAnimate实现，把ngAnimate添加到模型中：
	var app = angular.module('myApp', ['ngAnimate']);
	ngAnimate通过检测事件，使用预定义的class来设置动画
21.依赖注入
22.路由：允许通过不同的URL访问不同的内容
	可实现多视图的单页Web应用（SPA），在SPA中AngularJS通过#+标记实现
	$routeProvider.when(url, {
		template: string,
		templateUrl: string,
		controller: string, function或array,
		controllerAs: string,
		redirectTo: string, function,
		resolve: object<key, function>
	});
	
	
	

	
	
	
	
	
	
	
	
	
	




