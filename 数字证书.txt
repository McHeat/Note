SSL：安全套接层（Secure Socket Layer）
TLS：传输层安全（Transport Layer Security）
HTTPS：超文本传输安全协议（Hypertext Transfer Protocol Secure），是超文本传输协议和SSL/TLS的组合
CA：数字证书认证机构（Certificate Authority）
数字证书：
	|--	签名证书：对用户信息进行签名，保证信息的有效性和不可否认性
	|	|--	密钥：签名公钥及签名私钥
	|
	|	|----------------|
	|	|	用户的公钥	 |
	|	|----------------|
	|	|	用户的姓名   |	哈希算法	|-------------|		CA私钥加密	|-----------|
	|	|----------------|------------—>|   信息摘要  |---------------->| 数字签名	|
	|	|  证书机构名称  |				|-------------|					|-----------|
	|	|----------------|
	|	|	证书有效期   |
	|	|----------------|
	|
	|--	加密证书：对用户传送信息进行加密，保证信息的保密性和完整性
	|	|--	密钥：加密公钥及加密私钥
	|
	|	|---------------------------|
	|	|	      数字证书		   	|
	|	|	|----------------|		|
    |   |	|	用户的公钥	 |		|
    |   |	|----------------|		|
    |   |	|	用户的姓名   |		|	哈希算法	|---------------|
    |   |	|----------------|------|-------------->|	信息摘要	|\
    |   |	|  证书机构名称  |		|				|---------------| \
    |   |	|----------------|		|								   \
    |   |	|	证书有效期   |		|								    \是否相同？相同则该用户的公钥不是假冒，可用于
    |   |	|----------------|		|								   	/验证该用户的签名或者用于和该用户的加密通信
	|	|							|								   /
	|	|	|----------------|		|	CA公钥解密	|---------------| /
	|	|	|	数字签名	 |------|-------------->|	信息摘要	|/
	|	|	|----------------|		|               |---------------|
	|	|---------------------------|
	|--	所有证书都符合公钥基础设施(PKI, Public Key Infrastructure)制定的ITU-T X509国际标准(X.509标准)
	|--	证书格式：jks、cer、pfx、p12、pem
Java证书生成工具keytool
	|--	位于%JAVA_HOME%\bin目录下
	|--	功能：
	|--		生成P12证书
	|--		导出CER格式证书
	|--		导入CER格式证书至JKS证书库
	|--		查看JKS证书库等
	|--	无法直接导入PKCS12文件、p7b文件
Java操作类
	|--	Cipher：加密解密类，使用privateKey|publicKey来加解密
	|--	Signature：签名类，使用privateKey生成签名或使用publicKey验证签名
	|--	X509Certificate 证书类
	|--	PrivateKey：私钥类
	|--	PublicKey：公钥类
	|--	KeyStore：密钥库类
BouncyCastle
	|--	安装方式
	|	|--	1.运行时方式：Security.addProvider(new BouncyCastleProvider());	
	|	|--	2.动态注册：在jre/lib/security/java.security文件中添加
	|	|--				security.provider.<n>=org.bouncycastle.jce.provider.BouncyCastleProvider
	|	|--				并将相关jar包存放在jre/lib/ext文件夹下（推荐）
	|	|--	Note：安装Policy文件，在jdk下载页面寻找
	|	|--		  改变<n>时需要注意测试，防止不同JVM下不可运行
	|--	配置参数
	|	|--	通过接口ConfigurableProvider中的setParameter()：
	|	|		ConfigurableProvider prov = (ConfigurableProvider)Security.getProvider("BC");
	|	|--	主要参数：
	|	|		THREAD_LOCAL_EC_IMPLICITLY_CA、EC_IMPLICITLY_CA、
	|	|		THREAD_LOCAL_DH_DEFAULT_PARAMS、DH_DEFAULT_PARAMS
	|	|--	DigestCalculator接口：BcDigestCalculatorProvider和JcaDigestCalculatorProviderBuilder
	|	|--	ContentSigner接口：
	|	|		JCA:
	|	|			sigGen = new JcaContentSignerBuilder("SHA1withRSA").setProvider("BC").build(privKey);
	|	|		BC：
	|	|			AlgorithmIdentifier sigAlgId = new DefaultSignatureAlgorithmIdentifierFinder().find("SHA1withRSA");
	|	|			AlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder().find(sigAlgId);
	|	|			sigGen = new BcRSAContentSignerBuilder(sigAlgId, digAlgId).build(lwPrivKey);
	|	|--	ContentVerifier接口-> ContentVerifierProvider接口
	|	|		JCA:
	|	|			JcaContentVerifierProviderBuilder
	|	|		BC:
	|	|			BcContentVerifierProviderBuilder
	|--	X509Certificates & CertificationRequests
	|	|							JcaX509CertificateConberter
	|	|--	X509CertificateHolder -------------------------------> X509Certificate
	|	|					  JcaX509CertificateHolder
	|	|--	X509Certificate ----------------------------> X509CertificateHolder
	|	|--	JCA : X500Principal -- > X500Name.getInstance(x500Principal.getEncoded())
	|	|--	BC: X500Name ----> X500NameBuilder
	|	|--	生成Version1证书：
	|	|	/**
	|	|	* Build a sample V1 certificate to use as a CA root certificate
	|	|	 */
	|	|	 public static X509Certificate buildRootCert(KeyPair keyPair)
	|	|	 throws Exception
	|	|	 {
	|	|	 	X509v1CertificateBuilder certBldr = new JcaX509v1CertificateBuilder(
	|	|	 						new X500Name("CN=Test Root Certificate"),
	|	|	 						BigInteger.valueOf(1),
	|	|	 						new Date(System.currentTimeMillis()),
	|	|	 						new Date(System.currentTimeMillis() + VALIDITY_PERIOD),
	|	|	 						new X500Name("CN=Test Root Certificate"),
	|	|	 						keyPair.getPublic());
	|	|	 	ContentSigner signer = new JcaContentSignerBuilder("SHA1withRSA")
	|	|	 					.setProvider("BC").build(keyPair.getPrivate());

	|	|	 	return new JcaX509CertificateConverter().setProvider("BC").getCertificate(certBldr.build(signer));
	|	|	 }
	|	|--	生成Version3证书：
	|	|--	中间CA证书：
	|	|		 /**
	|	|		 * Build a sample V3 certificate to use as an intermediate CA certificate
	|	|		 */
	|	|		 public static X509Certificate buildIntermediateCert(
	|	|		 		PublicKey intKey, PrivateKey caKey, X509Certificate caCert) throws Exception
	|	|		 {
	|	|		 	X509v3CertificateBuilder certBldr = new JcaX509v3CertificateBuilder(
	|	|		 											caCert.getSubjectX500Principal(),
	|	|		 											BigInteger.valueOf(1),
	|	|		 											new Date(System.currentTimeMillis()),
	|	|		 											new Date(System.currentTimeMillis() + VALIDITY_PERIOD),
	|	|		 											new X500Principal("CN=Test CA Certificate"),
	|	|		 											intKey);
	|	|		 	JcaX509ExtensionUtils extUtils = new JcaX509ExtensionUtils();
	|	|		 	certBldr.addExtension(Extension.authorityKeyIdentifier,
	|	|		 							false, extUtils.createAuthorityKeyIdentifier(caCert))
	|	|		 			.addExtension(Extension.subjectKeyIdentifier,
	|	|		 							false, extUtils.createSubjectKeyIdentifier(intKey))
	|	|		 			.addExtension(Extension.basicConstraints,
	|	|		 							true, new BasicConstraints(0))
	|	|		 			.addExtension(Extension.keyUsage,
	|	|		 							true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));
	|	|		 	ContentSigner signer = new JcaContentSignerBuilder("SHA1withRSA")
	|	|		 								.setProvider("BC").build(caKey);
	|	|		 	return new JcaX509CertificateConverter().setProvider("BC").getCertificate(certBldr.build(signer));
	|	|		 }
	|	|--	终端实体证书：
	|	|		/**
	|	|		* Build a sample V3 certificate to use as an end entity certificate
	|	|		*/
	|	|		public static X509Certificate buildEndEntityCert(
	|	|				PublicKey entityKey, PrivateKey caKey, X509Certificate caCert) throws Exception
	|	|		{
	|	|			X509v3CertificateBuilder certBldr = new JcaX509v3CertificateBuilder(
	|	|													caCert.getSubjectX500Principal(),
	|	|													BigInteger.valueOf(1),
	|	|													new Date(System.currentTimeMillis()),
	|	|													new Date(System.currentTimeMillis() + VALIDITY_PERIOD),
	|	|													new X500Principal("CN=Test End Entity Certificate"),
	|	|													entityKey);
	|	|			JcaX509ExtensionUtils extUtils = new JcaX509ExtensionUtils();
	|	|			certBldr.addExtension(Extension.authorityKeyIdentifier,
	|	|								false, extUtils.createAuthorityKeyIdentifier(caCert))
	|	|					.addExtension(Extension.subjectKeyIdentifier,
	|	|								false, extUtils.createSubjectKeyIdentifier(entityKey))
	|	|					.addExtension(Extension.basicConstraints,
	|	|								true, new BasicConstraints(false))
	|	|					.addExtension(Extension.keyUsage,
	|	|								true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));
	|	|			ContentSigner signer = new JcaContentSignerBuilder("SHA1withRSA")
	|	|			.setProvider("BC").build(caKey);
	|	|			return new JcaX509CertificateConverter().setProvider("BC").getCertificate(certBldr.build(signer));
	|	|		}
	|	|--	证书扩展项：
	|	|		BasicConstraints：决定包含该Extension的证书是否可用于签名其他证书，及可签名的层级
	|	|		AuthorityKeyIdentifier：标识证书的公钥可用于核实证书的签名
	|	|		SubjectKeyIdentifier：标识证书包含的公钥
	|	|		SubjectAlternativeName：存储使用者别名或电子邮件地址（推荐）
	|	|		IssuerAlternativeName：存储证书发布者的别名
	|	|		KeyUsage：通常用于限制证书包含的key的使用
	|	|		ExtendedKeyUsage：通常用于锁定证书用于特定的目的
	|--	证书处理：
	|	|--	1.使用X509CertificateHolder									JcaX509CertificateConverter
	|	|--	2.使用JCA的X509Certificate			X509CertificateHolder -------------------------------> X509Certificate
	|--	Certification Requests
	|	|--	用于发送公钥及其他详情到CA来获取CA产生的证书
	|	|--	1.使用PKCS#10创建CertificationRequest
	|	|	|--	PKCS10CertificationRequestBuilder类，
	|	|--	2.使用CRMF(Certificate Request Message Format)
	|	|	|--	JcaCertificateRequestMessageBuilder类
	|	|	|-- 两个阶段所有权证明的CRMF
	|--	Key&PersonalCredentialStorage
	|	|--	1.JKS格式在大多数用途中是足够的
	|	|--	2.PKCS#12格式在平台兼容性及安全级别上更好
	|	|	  PKCS#12文件由PDU(Protocol Data Units)序列组成，结构是SafeBag-->AuthenticatedSafe-->MAC-->PFX
	|	|	  PBE加密：PKCSObjectIdentifiers.XXX    NISTObjectIdentifiers.XXX 
	|	|	  如果使用PKCS#5会导致不兼容UTF-8:解决方式是使用Base64编码
	|	|		char[] asciiPass = Strings.asCharArray(Base64.encode(Strings.toUTF8ByteArray(passwd)));
	|--	CMS(Cryptographic Message Syntax)
	|	|--	CMSTypedData & CMSTypedStream
	|	|--	创建和验证分离式签名（Detached Signature）
	|	|		CMSSignedDataGenerator | CMSSignerDataStreamGenerator
	|	|--	JCA模式的分离式签名
	|	|	生成器：
	|	|	|--	JcaSimpleSignerInfoGeneratorBuilder
	|	|	|	|--	从单一的provider中获取签名算法和相关的摘要
	|	|	|--	JcaSignerInfoGeneratorBuileder
	|	|	|	|--	允许分别配置DigestCalculator&ContentSigner
	|	|	|-- 是否包含证书信息：构造包含证书的Store并传递到CMSSignedDataGenerator.setCertificates()
	|	|	核实
	|	|	|--	使用包含了ContentVerfifierProvider的SignerInfoVerifier
	|	|	|--	通过JcaSimpleSignerInfoVerifierBuilder获得SignerInfoVerifier
	|	|	|	通过JcaSignerInfoVerifierBuilder获得（More Flexibility）	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	