此项目介绍了通过自动配置和绑定SpringEnvironment及其他Spring编程模型风格在SpringBoot应用中集成NetflixOSS。
通过简单的注解，你可以在自己的应用中快速地启动和配置通用的模式并使用Netflix组件搭建大型分布式系统。
通用模式包括：
	|--	服务发现Service Discovery (Eureka)
	|--	断路器Circuit Breaker (Hystrix)
	|--	智能路由Intelligent Routing (Zuul)
	|--	客户端负载均衡Client Side Load Balancing (Ribbon)
ServiceDiscovery（Eureka）
	|--	是微服务框架的核心原则之一。
	|		Eureka是Netflix的服务发现的服务器和客户端。
	|		Eureka服务器可高效地配置和部署，可从其他服务器复制注册服务的状态。
	|--	引入Eureka客户端
	|		为了在项目中使用Eureka客户端，需使用org.springframework.cloud:spring-cloud-starter-eureka的starter。
	|--	在Eureka上注册
	|		当在Eureka上注册时，客户端会提供一些元数据，如host和port、健康检测URL、主页等。
	|		Eureka会从服务的每个实例接收心跳信息。如果心跳超出配置时间表，实例会从注册表中被移除。
	|		启动Eureka发现：使用@EnableEurekaClient(仅Eureka时有效)或@EnableDiscoveryClient
	|		配置Eureka服务器：
	|			eureka:
	|			  client:
	|			    serviceUrl:
	|			      defaultZone: http://localhost:8761/eureka/
	|		@EnableEurekaClient会将app注册为一个Eureka的实例同时也会作为Eureka的一个客户端。
	|			实例的行为受eureka.instance.*配置键值的控制，如果已配置了spring.application.name时默认值已可满足需求。
	|--	Eureka服务器授权
	|		如果eureka.client.serviceUrl.defaultZone配置的某个url中已集成凭证，可使用HTTP基本认证。
	|		如果更复杂的需求，请创建DiscoveryClientOptionalArgs的@Bean并注入ClientFilter实例。
	|--	状态页和健康监控
	|		Eureka实例的状态页和健康监控器默认为“/info”和“/health”。
	|		修改默认地址：
	|			eureka:
	|			  instance:
	|			    statusPageUrlPath: ${management.context-path}/info
	|			    healthCheckUrlPath: ${management.context-path}/health
	|--	注册安全应用
	|		1.如果想将应用与HTTPS关联，可以通过EurekaInstanceConfig中的两个标记设置
	|			eureka.instance.[nonSecurePortEnabled, securePortEnabled]=[false, true]
	|		这个设置会允许Eureka发布的实例信息中显示明确的安全会话要求。
	|		2.DiscoveryClient会为上述配置的服务返回以https开头的URI
	|		3.上述配置的Eureka实例信息会包含一个安全健康检查URL
	|		  如果未显式地重写，Eureka仍然会发布非安全的状态页和首页URL
	|--	安全检查
	|		Eureka默认地使用客户端的心跳判断是否在线。
	|		在未指明的情况下，一旦成功注册后，Eureka会认为应用一直处于UP状态。
	|		通过修改eureka.client.healthcheck.enabled: true，非UP状态的应用不会收到流量。
	|-- Eureka实例和客户端的元数据
	|	|--	在CloudFoundry上使用Eureka
	|	|		Cloudfoundry包含一个全局的router，同一个应用的所有实例都有着同样的hostname。
	|	|		为了使用这个router，需明确地设置hostname和port（securePort|nonSecurePort）
	|	|--	在AWS上使用Eureka
	|	|		为了在AWS云平台使用，Eureka实例需配置为AWS可用,通过自定义EurekaInstanceConfigBean的方式可实现：
	|	|	|--------------------------------------------------------------------------------------------------------|
	|	|	|	@Bean                                                                                                |
	|	|	|	@Profile("!default")                                                                                 |
	|	|	|	public EurekaInstanceConfigBean eurekaInstanceConfig(InetUtils inetUtils) {                          |
	|	|	|		EurekaInstanceConfigBean b = new EurekaInstanceConfigBean(inetUtils);                            |
	|	|	|		AmazonInfo info = AmazonInfo.Builder.newBuilder().autoBuild("eureka");                           |
	|	|	|		b.setDataCenterInfo(info);                                                                       |
	|	|	|		return b;                                                                                        |
	|	|	|	}                                                                                                    |
	|	|	|--------------------------------------------------------------------------------------------------------|	
	|	|--	修改Eureka实例的ID
	|	|		默认Netflix Eureka实例会注册相同的ID和hostname。
	|	|		Spring Cloud Eureka可通过eureka.instance.instanceId: xxxx来覆盖ID。
	|--	使用EurekaClient
	|		当添加了@EnableDiscoveryClient或@EnableEurekaClient时，应用就能够从Eureka服务器上发现服务实例。
	|		通过注入EurekaClient或DiscoveryClient的实例bean来实现。
	|--	注册服务慢的原因
	|		直到实例、服务器和客户端在本地缓存中的元数据相同时，服务才会被客户端发现。这通常需要3次心跳。
	|		默认的心跳时间间隔为30s，可通过eureka.instance.leaseRenewalIntervalInSeconds修改。

































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	